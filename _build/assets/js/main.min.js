
$(document).ready(function() {
	window.validateSelf = function(arg) {		/* 
			Usage for inputs & textarea: $("input textarea").on("focusout", function(e){ validateSelf(this); });
			Usage for select: $("select").on("change", function(e){ validateSelf(this); });
			Behaviour: Can be attached to any text input, select, textarea. !!!Password field check is hardcoded and needs to be updated!!!
			WIP: Separate password field check from the function.
		*/
		var value = arg.val();
		var name = arg.attr("name");
		// var type = arg.type;
		// var tag = arg.tagName
		
		// var passwordFieldID = "#" + passwordField;
		// var passwordFieldConfirmID = "#" + passwordFieldConfirm;
		// Password Field Configuration END - !Hardcoded!
		
		
		if (arg.is(":radio") || arg.is(":checkbox")) { //ignores radio and checkbox inputs
			return false;
		}

	  //If FIELD is Empty
		if (value === "") { 
	    validateStateEvent(arg,"neutral");
	    return;
	  }

	  //If FIELD is Email
	  if (name.search("Email") !== -1 || name.search("E-mail") !== -1) { 
	    if (value.search(/^[\w._-]+[+]?[\w._-]+@[\w.-]+\.[a-zA-Z]{2,6}$/) !== -1) {
	      validateStateEvent(arg,"valid");
	    } else {      
	    	arg.val("");
	      validateStateEvent(arg,"invalid-email");
	    }
	    return;
	  }

	  //If FIELD is Phone
	  if (name.search("Phone") !== -1) { 
	    if ((value.search(/(?:\(?\+\d{2}\)?\s*)?\d+(?:[ -]*\d+)*$/) !== -1) && (value.length === 10)) {
	      validateStateEvent(arg,"valid"); 
	    } else {  	      
	      arg.val("");
	      validateStateEvent(arg,"invalid-phone");
	    }
	    return;
	  }

	  
	  validateStateEvent(arg,"valid");
	} 

	window.validateStateEvent = function(arg,state) {
		/*
			Usage with objects: validateStateEvent(this,"state");
			Usage with jQuery elements: validateStateEvent($(this)[0],"state");
			Behaviour: Adds/Removes classes based on event triggered by the "state" argument of the function. Can further customized on demand.
		*/
		// var classList = arg.classList;
		var correct = "input-valid"; //css class for valid input
		var error = "input-invalid"; //css class for invalid input
		var emailError = "Please fill in a valid email address."; //email invalid error message -- special event
		var phoneError = "Please fill in a valid phone number."; //phone invalid error message -- special event
		if (state === "neutral") { 
			arg.removeClass(error);
  		arg.removeClass(correct);
			return;
		}
		if (state === "valid") {
			arg.removeClass(error);
  		arg.addClass(correct);
  		arg.parent().find(".popover").remove();
			return;
		}
		if (state === "invalid") {
			arg.removeClass(correct);
  		arg.addClass(error);
  		return;
		}
		if (state === "invalid-email") {
			arg.removeClass(correct);
  		arg.addClass(error);
  		arg.popover({content: "Please enter a valid e-mail.",placement: "top"});
  		arg.popover("show");
  		return;
		}
		if (state === "invalid-phone") {
			arg.removeClass(correct);
  		arg.addClass(error);  			    
  		return;
		}
		arg.addClass(correct);
	}




	$('input[type="text"], textarea').on("focusout", function(e){		
		validateSelf($(this));
	});
	$("select").on("change", function(e){
		validateSelf($(this));
	});


	

});

var HeaderReact = React.createClass({
	displayName: "HeaderReact",

	render: function () {
		return React.createElement(
			"div",
			null,
			React.createElement(
				"header",
				{ className: "header" },
				React.createElement(
					"div",
					{ className: "header-upper" },
					React.createElement(
						"div",
						{ className: "container" },
						React.createElement(
							"div",
							{ className: "row" },
							React.createElement(
								"div",
								{ className: "col-xs-12" },
								React.createElement(
									"div",
									{ className: "row" },
									React.createElement(
										"nav",
										{ className: "header-nav col-sm-6" },
										React.createElement("div", { id: "react-header-navigation" })
									),
									React.createElement(
										"div",
										{ className: "header-upper-content col-sm-6" },
										React.createElement(
											"div",
											{ className: "header-login" },
											React.createElement(
												"a",
												{ href: "myaccount.html" },
												React.createElement("i", { className: "ion-person" }),
												" Daniel`s Account "
											)
										),
										React.createElement(
											"form",
											{ method: "GET", action: "/search.html", className: "header-search", autocomplete: "off", spellcheck: "false" },
											React.createElement("input", { type: "search", name: "eComQuery", id: "q", placeholder: "Search" }),
											React.createElement(
												"button",
												{ type: "submit" },
												React.createElement("i", { className: "ion-ios-search" })
											)
										),
										React.createElement(
											"div",
											{ className: "header-mail" },
											React.createElement(
												"button",
												{ type: "button" },
												React.createElement("i", { className: "ion-ios-email" })
											)
										),
										React.createElement(
											"div",
											{ className: "header-phone" },
											React.createElement(
												"button",
												{ type: "button" },
												React.createElement("i", { className: "ion-android-call" })
											)
										)
									)
								)
							)
						)
					)
				),
				React.createElement(
					"div",
					{ className: "header-middle" },
					React.createElement(
						"div",
						{ className: "container" },
						React.createElement(
							"div",
							{ className: "row" },
							React.createElement(
								"div",
								{ className: "col-xs-12" },
								React.createElement(
									"div",
									{ className: "logo" },
									React.createElement(
										"h1",
										null,
										React.createElement(
											"a",
											{ href: "homepage.html" },
											"Eva ",
											React.createElement(
												"small",
												null,
												"| Doar pentru tine."
											)
										)
									)
								)
							)
						)
					)
				)
			),
			React.createElement(
				"nav",
				{ className: "nav-main", role: "navigation" },
				React.createElement(
					"div",
					{ className: "container" },
					React.createElement(
						"div",
						{ className: "row" },
						React.createElement(
							"div",
							{ className: "col-xs-12" },
							React.createElement("div", { id: "react-main-navigation" })
						)
					)
				)
			)
		);
	}
});
var Navigation = React.createClass({
	displayName: "Navigation",

	getInitialState: function () {
		return {
			data: []
		};
	},
	componentDidMount: function () {
		$.getJSON(this.props.source, (function (result) {
			if (this.isMounted()) {
				this.setState({
					data: result[this.props.target]
				});
			}
		}).bind(this));
	},
	eachItem: function (item, i) {
		return React.createElement(
			"li",
			{ key: i,
				index: i,
				className: i === this.props.active - 1 ? 'dropdown active' : 'dropdown'
			},
			React.createElement(
				"a",
				{ href: item.url },
				item.name
			)
		);
	},
	render: function () {
		return React.createElement(
			"ul",
			null,
			this.state.data.map(this.eachItem)
		);
	}
});
var NewsletterBlock = React.createClass({
	displayName: "NewsletterBlock",

	render: function () {
		return React.createElement(
			"div",
			{ className: this.props.className },
			React.createElement(
				"div",
				{ className: "item-newsletter" },
				React.createElement(
					"div",
					{ className: "newsletter" },
					React.createElement(
						"p",
						null,
						"Stay in touch with our newest collections"
					),
					React.createElement("input", { type: "email", placeholder: "Enter your email address." }),
					React.createElement(
						"button",
						{ type: "button" },
						"Subscribe to Newsletter"
					)
				)
			)
		);
	}
});

var Banner = React.createClass({
	displayName: "Banner",

	getInitialState: function () {
		return {
			imageSrc: "",
			title: "Placeholder Title",
			url: "",
			newItem: true,
			data: [{
				"title": "Half",
				"src": "assets/img/eva-banner-wide-1.jpg",
				"url": "#"
			}, {
				"title": "Half",
				"src": "assets/img/eva-banner-wide-2.jpg",
				"url": "#"
			}]
		};
	},
	remove: function () {
		this.props.onRemove(this.props.index);
	},
	eachItem: function (item, i) {
		return React.createElement(
			"button",
			{ key: i, className: "col-xs-2" },
			React.createElement("img", { index: i, src: item.src, title: item.title })
		);
	},
	renderDisplay: function () {
		return React.createElement(
			"a",
			{ href: this.props.url },
			React.createElement("img", { src: this.props.imageSrc, title: this.props.title })
		);
	},
	renderConfig: function () {
		return React.createElement(
			"div",
			{ className: "editing-banner" },
			React.createElement(
				"a",
				{ href: this.props.url },
				React.createElement("img", { src: this.props.imageSrc, title: this.props.title })
			),
			React.createElement(
				"button",
				{ type: "button", className: "delete-banner", onClick: this.remove },
				React.createElement("i", { className: "fa fa-trash-o" })
			)
		);
	},
	renderNewItem: function () {
		return React.createElement(
			"div",
			{ className: "editing-banner" },
			React.createElement(
				"a",
				{ href: this.props.url },
				React.createElement("img", { src: this.props.imageSrc, title: this.props.title })
			),
			React.createElement(
				"button",
				{ type: "button", className: "delete-banner", onClick: this.remove },
				React.createElement("i", { className: "fa fa-trash-o" })
			),
			this.state.data.map(this.eachItem)
		);
	},
	render: function () {
		if (this.props.newItem) {
			return this.renderNewItem();
		}
		if (this.props.editing === true) {
			return this.renderConfig();
		} else {
			return this.renderDisplay();
		}
	}
});
var GenerateRow = React.createClass({
	displayName: "GenerateRow",

	getInitialState: function () {
		return {
			data: [],
			fluid: false,
			columnNumber: 3,
			editing: false
		};
	},
	componentDidMount: function () {
		this.setState({ columnNumber: this.props.columns === "" ? this.state.columnNumber : this.props.columns });
		this.setState({ editing: this.props.editing === "" ? this.state.editing : this.props.editing });
		this.setState({ data: this.props.source });
	},
	containerClass: function () {
		if (this.state.fluid === true) {
			return "container-fluid";
		} else {
			return "container";
		}
	},
	handleColumnNumber: function (e) {
		var value = e.target.value;
		this.setState({ columnNumber: value });
	},
	dynamicClass: function () {
		var columnClass = "" + 12 / this.state.columnNumber;
		return "item col-sm-" + columnClass;
	},
	edit: function () {
		var value = !this.state.editing;
		this.setState({ editing: value });
	},
	add: function () {
		var arr = this.state.data;
		arr.push(this.state.data[0]);
		this.setState({ data: arr });
	},
	remove: function (i) {
		var arr = this.state.data;
		arr.splice(i, 1);
		this.setState({ data: arr });
	},
	addNewsletter: function () {
		if (this.props.newsletter) {
			return React.createElement(NewsletterBlock, { className: this.dynamicClass() });
		}
	},
	eachItem: function (item, i) {
		return React.createElement(
			"div",
			{ key: i, className: this.dynamicClass() },
			React.createElement(Banner, { index: i, url: item.url, imageSrc: item.src, title: item.title, editing: this.state.editing, onRemove: this.remove })
		);
	},
	renderDisplay: function () {
		return React.createElement(
			"div",
			{ className: "row-wrap" },
			React.createElement(
				"div",
				{ className: this.containerClass() },
				React.createElement(
					"div",
					{ className: "configuration" },
					React.createElement(
						"button",
						{ type: "button", className: "edit-trigger", onClick: this.edit, "data-toggle": "tooltip", "data-placement": "top", title: "Row Configuration" },
						React.createElement("i", { className: "fa fa-cog" })
					)
				),
				React.createElement(
					"div",
					{ className: "row" },
					this.state.data.map(this.eachItem)
				)
			)
		);
	},
	renderConfig: function () {
		return React.createElement(
			"div",
			{ className: "row-wrap edit" },
			React.createElement(
				"div",
				{ className: this.containerClass() },
				React.createElement(
					"div",
					{ className: "configuration" },
					React.createElement(
						"button",
						{ type: "button", className: "edit-trigger", onClick: this.edit, "data-toggle": "tooltip", "data-placement": "top", title: "Row Configuration" },
						React.createElement("i", { className: "fa fa-cog" })
					),
					React.createElement(
						"div",
						{ className: "content" },
						React.createElement(
							"p",
							null,
							"Columns: ",
							React.createElement(
								"span",
								{ className: "modifier" },
								this.state.columnNumber
							)
						),
						React.createElement("input", { onChange: this.handleColumnNumber, type: "range", name: "columnNumbers", min: "1", max: "12", list: "numbers", defaultValue: this.state.columnNumber }),
						React.createElement(
							"datalist",
							{ id: "numbers" },
							React.createElement(
								"option",
								null,
								"1"
							),
							React.createElement(
								"option",
								null,
								"2"
							),
							React.createElement(
								"option",
								null,
								"3"
							),
							React.createElement(
								"option",
								null,
								"4"
							),
							React.createElement(
								"option",
								null,
								"6"
							),
							React.createElement(
								"option",
								null,
								"12"
							)
						)
					)
				),
				React.createElement(
					"div",
					{ className: "row" },
					this.state.data.map(this.eachItem),
					React.createElement(
						"div",
						{ className: "col-xs-12" },
						React.createElement(
							"button",
							{ type: "button", className: "add-banner", onClick: this.add },
							"Add new banner"
						)
					)
				)
			)
		);
	},
	render: function () {
		if (this.state.editing === true) {
			return this.renderConfig();
		} else {
			return this.renderDisplay();
		}
	}
});
var Banners = React.createClass({
	displayName: "Banners",

	getInitialState: function () {
		return {
			data: [],
			editing: false
		};
	},
	componentDidMount: function () {
		this.setState({ columnNumber: this.props.columns });
		$.getJSON(this.props.source, (function (result) {
			if (this.isMounted()) {
				this.setState({
					data: result
				});
			}
		}).bind(this));
	},
	edit: function () {
		var value = !this.state.editing;
		this.setState({ editing: value });
	},
	remove: function (i) {
		var arr = this.state.data;
		arr.splice(i, 1);
		this.setState({ data: arr });
	},
	addNewsletter: function () {
		if (this.props.newsletter) {
			return React.createElement(NewsletterBlock, { className: this.dynamicClass() });
		}
	},
	eachItem: function (item, i) {
		return React.createElement(GenerateRow, { key: i, editing: this.state.editing, source: this.state.data[i], columns: this.props.columns, newsletter: "true" });
	},
	renderDisplay: function () {
		return React.createElement(
			"div",
			{ className: "banner-zone" },
			this.state.data.map(this.eachItem)
		);
	},
	renderConfig: function () {
		return React.createElement(
			"div",
			{ className: "banner-zone edit" },
			this.state.data.map(this.eachItem)
		);
	},
	render: function () {
		if (this.state.editing) {
			return this.renderConfig();
		} else {
			return this.renderDisplay();
		}
	}
});
ReactDOM.render(React.createElement(HeaderReact, null), document.getElementById('react-header'));
ReactDOM.render(React.createElement(Navigation, { source: "http://localhost:3000/resources/navigation.json", target: "mainNav", active: "2" }), document.getElementById('react-main-navigation'));
ReactDOM.render(React.createElement(Navigation, { source: "http://localhost:3000/resources/navigation.json", target: "headerNav" }), document.getElementById('react-header-navigation'));

if (document.getElementById('react-homepage-middle-banners') !== null) {
	ReactDOM.render(React.createElement(Banners, { source: "http://localhost:3000/resources/homepage.json", newsletter: "true", columns: "3" }), document.getElementById('react-homepage-middle-banners'));
}
if (document.getElementById('react-homepage-lower-banners') !== null) {
	ReactDOM.render(React.createElement(Banners, { source: "http://localhost:3000/resources/homepage-lower-banners.json", columns: "2" }), document.getElementById('react-homepage-lower-banners'));
}
if (document.getElementById('react-wishlist') !== null) {
	ReactDOM.render(React.createElement(Banners, { source: "http://localhost:3000/resources/wishlist.json", columns: "6" }), document.getElementById('react-wishlist'));
}
if (document.getElementById('react-special-offers') !== null) {
	ReactDOM.render(React.createElement(Banners, { source: "http://localhost:3000/resources/homepage-lower-banners.json", columns: "2" }), document.getElementById('react-special-offers'));
}
//# sourceMappingURL=main.min.js.map